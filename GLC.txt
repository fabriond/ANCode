S = Decl S
S = 'funDef' FunName '(' Param ')' FunType Body S
S = &

function declaration:
FunName = 'id'
FunName = 'main'
Param = Param ',' Type 'id' ArrayOpt
Param = Type 'id' ArrayOpt
Param = &
Return = 'funReturn' Ec
FunCall = '(' LEc ')'

variable declaration:
Decl = Type LI
LI = LI ',' 'id' ArrayOpt Inst ';'
LI = 'id' ArrayOpt Inst

instiating variables:
Inst = 'opEq' ArrayCons
Inst = 'opEq' Ec
Inst = &

id:
Id = 'id' ArrayAccess
Id = 'id' FunCall

array options:
ArrayOpt = '(' Type ',' 'intCons' ')'
ArrayOpt = &
ArrayAccess = '[' Ea ']'
ArrayAccess = &

array constant:
ArrayCons = '[' LEc ']'

variable type:
Type = 'intType'
Type = 'floatType'
Type = 'charType'
Type = 'boolType'
Type = 'stringType'
Type = 'arrayType'

function type:
FunType = 'funVoid'
FunType = Type

commands:
Command = 'instPrint' '(' Ec ')' ';'
Command = 'instRead' '(' IdL ')' ';'
Command = 'estWhile' '(' Eb ')' Body                               // while
Command = 'estDo' Body 'estWhile' '(' Eb ')' ';'                   // do-while
Command = 'estLoop' '(' Atr 'loopSep' Eb 'loopSep' Atr ')' Body    // loop
Command = 'estIf' '(' Eb ')' Body IFr                              // if
IFr = 'estElsif' '(' Eb ')' Body IFr                               // elsif
IFr = 'estElse' Body                                               // else

id list:
IdL = IdL ',' 'id' ArrayAccess
IdL = 'id' ArrayAccess

concatenation options:
ConcOpt = '[' 'floatCons' ']'
ConcOpt = &

body:
Body = '{' BodyPart '}'
BodyPart = Decl BodyPart
BodyPart = Atr ';' BodyPart
BodyPart = Command BodyPart
BodyPart = Return ';'
BodyPart = &

list of expressions:
LEc = LEc ',' Ec 
LEc = Ec

expression:
Atr = 'id' ArrayAccess 'opEq' Ec
Atr = 'id' FunCall
Ec = Ec 'opConc' ConcOpt Fc     //concatenação
Ec = Fc
Fc = 'stringCons'
Fc = 'charCons'
Fc = Eb
Eb = Eb 'opLogOr' Tb    //"ou" lógico
Eb = Tb
Tb = Tb 'opLogAnd' Fb   //"e" lógico
Tb = Fb
Fb = Fb 'opRelLtGt' Ra  //maior/menor (igual) que
Fb = 'opLogNot' Fb      //not
Fb = 'boolCons'
Fb = Ra
Ra = Ra 'opRelEq' Ea    //igual/diferente
Ra = Ea
Ea = Ea 'opAd' Ta       //soma/subtração
Ea = Ta
Ta = Ta 'opMult' Pa     //multiplicação/divisão
Ta = Pa
Pa = Fa 'opExp' Pa      //exponencial
Pa = Fa
Fa = '(' Eb ')'
Fa = 'opUnNeg' Fa       //unário negativo
Fa = Id
Fa = 'intCons'
Fa = 'floatCons'
